console.log('hello world');
/** Command -v :-  v17.1.0 */
/**  -h or --help :- Usage: node [options] [ script.js ] [arguments]
       node inspect [options] [ script.js | host:port ] [arguments]

Options:
  -                             script read from stdin (default if no file
                                name is provided, interactive mode if a   
                                tty)
  --                            indicate the end of node options
  --abort-on-uncaught-exception aborting instead of exiting causes a core 
                                file to be generated for analysis
  -c, --check                   syntax check script without executing     
  --completion-bash             print source-able bash completion script  
  -C, --conditions=...          additional user conditions for conditional
                                exports and imports
  --cpu-prof                    Start the V8 CPU profiler on start up, and
                                write the CPU profile to disk before exit.
                                If --cpu-prof-dir is not specified, write
                                the profile to the current working
                                directory.
  --cpu-prof-dir=...            Directory where the V8 profiles generated
                                by --cpu-prof will be placed. Does not
                                affect --prof.
  --cpu-prof-interval=...       specified sampling interval in
                                microseconds for the V8 CPU profile
                                generated with --cpu-prof. (default: 1000)
  --cpu-prof-name=...           specified file name of the V8 CPU profile
                                generated with --cpu-prof
  --diagnostic-dir=...          set dir for all output files (default:
                                current working directory)
  --disable-proto=...           disable Object.prototype.__proto__
  --disallow-code-generation-from-strings
                                disallow eval and friends
  --dns-result-order=...        set default value of verbatim in
                                dns.lookup. Options are 'ipv4first' (IPv4
                                addresses are placed before IPv6
                                addresses) 'verbatim' (addresses are in
                                the order the DNS resolver returned)
  --enable-fips                 enable FIPS crypto at startup
  --enable-source-maps          Source Map V3 support for stack traces
  -e, --eval=...                evaluate script
  --experimental-import-meta-resolve
                                experimental ES Module
                                import.meta.resolve() support
  --experimental-json-modules   experimental JSON interop support for the
                                ES Module loader
  --loader, --experimental-loader=...
                                use the specified module as a custom
                                loader
  --experimental-policy=...     use the specified file as a security
                                policy
  --es-module-specifier-resolution, --experimental-specifier-resolution=...
                                Select extension resolution algorithm for
                                es modules; either 'explicit' (default) or
                                'node'
  --experimental-vm-modules     experimental ES Module support in vm
                                module
  --experimental-wasi-unstable-preview1
                                experimental WASI support
  --experimental-wasm-modules   experimental ES Module support for
                                webassembly modules
  --force-context-aware         disable loading non-context-aware addons
  --force-fips                  force FIPS crypto (cannot be disabled)
  --frozen-intrinsics           experimental frozen intrinsics support
  --heap-prof                   Start the V8 heap profiler on start up,
                                and write the heap profile to disk before
                                exit. If --heap-prof-dir is not specified,
                                write the profile to the current working
                                directory.
  --heap-prof-dir=...           Directory where the V8 heap profiles
                                generated by --heap-prof will be placed.
  --heap-prof-interval=...      specified sampling interval in bytes for
                                the V8 heap profile generated with
                                --heap-prof. (default: 512 * 1024)
  --heap-prof-name=...          specified file name of the V8 heap profile
                                generated with --heap-prof
  --heapsnapshot-near-heap-limit=...
                                Generate heap snapshots whenever V8 is
                                approaching the heap limit. No more than
                                the specified number of heap snapshots
                                will be generated.
  --heapsnapshot-signal=...     Generate heap snapshot on specified signal
  -h, --help                    print node command line options (currently
                                set)
  --huge-max-old-generation-size
                                increase default maximum heap size on
                                machines with 16GB memory or more
  --icu-data-dir=...            set ICU data load path to dir (overrides
                                NODE_ICU_DATA) (note: linked-in ICU data
                                is present)
  --input-type=...              set module type for string input
  --insecure-http-parser        use an insecure HTTP parser that accepts
                                invalid HTTP headers
  --inspect[=[host:]port]       activate inspector on host:port (default:
                                127.0.0.1:9229)
  --inspect-brk[=[host:]port]   activate inspector on host:port and break
                                at start of user script
  --debug-port, --inspect-port=[host:]port
                                set host:port for inspector
  --inspect-publish-uid=...     comma separated list of destinations for
                                inspector uid(default: stderr,http)
  -i, --interactive             always enter the REPL even if stdin does
                                not appear to be a terminal
  --interpreted-frames-native-stack
                                help system profilers to translate
                                JavaScript interpreted frames
  --jitless                     disable runtime allocation of executable
                                memory
  --max-http-header-size=...    set the maximum size of HTTP headers
                                (default: 16384 (16KB))
  --no-addons                   disable loading native addons
  --no-deprecation              silence deprecation warnings
  --no-experimental-repl-await  experimental await keyword support in REPL
  --no-extra-info-on-fatal-exception
                                hide extra information on fatal exception
                                that causes exit
  --no-force-async-hooks-checks disable checks for async_hooks
  --no-global-search-paths      disable global module search paths
  --no-warnings                 silence all process warnings
  --node-memory-debug           Run with extra debug checks for memory
                                leaks in Node.js itself
  --openssl-config=...          load OpenSSL configuration from the
                                specified file (overrides OPENSSL_CONF)
  --openssl-legacy-provider     enable OpenSSL 3.0 legacy provider
  --pending-deprecation         emit pending deprecation warnings
  --policy-integrity=...        ensure the security policy contents match
                                the specified integrity
  --preserve-symlinks           preserve symbolic links when resolving
  --preserve-symlinks-main      preserve symbolic links when resolving the
                                main module
  -p, --print [...]             evaluate script and print result
  --prof                        Generate V8 profiler output.
  --prof-process                process V8 profiler output generated using
                                --prof
  --redirect-warnings=...       write warnings to file instead of stderr
  --report-compact              output compact single-line JSON
  --report-directory, --report-dir=...
                                define custom report pathname. (default:
                                current working directory)
  --report-filename=...         define custom report file name. (default:
                                YYYYMMDD.HHMMSS.PID.SEQUENCE#.txt)
  --report-on-fatalerror        generate diagnostic report on fatal
                                (internal) errors
  --report-on-signal            generate diagnostic report upon receiving
                                signals
  --report-signal=...           causes diagnostic report to be produced on
                                provided signal, unsupported in Windows.
                                (default: SIGUSR2)
  --report-uncaught-exception   generate diagnostic report on uncaught
                                exceptions
  -r, --require=...             module to preload (option can be repeated)
  --secure-heap=...             total size of the OpenSSL secure heap
  --secure-heap-min=...         minimum allocation size from the OpenSSL
                                secure heap
  --throw-deprecation           throw an exception on deprecations
  --title=...                   the process title to use on startup
  --tls-cipher-list=...         use an alternative default TLS cipher list
  --tls-keylog=...              log TLS decryption keys to named file for
                                traffic analysis
  --tls-max-v1.2                set default TLS maximum to TLSv1.2
                                (default: TLSv1.3)
  --tls-max-v1.3                set default TLS maximum to TLSv1.3
                                (default: TLSv1.3)
  --tls-min-v1.0                set default TLS minimum to TLSv1.0
                                (default: TLSv1.2)
  --tls-min-v1.1                set default TLS minimum to TLSv1.1
                                (default: TLSv1.2)
  --tls-min-v1.2                set default TLS minimum to TLSv1.2
                                (default: TLSv1.2)
  --tls-min-v1.3                set default TLS minimum to TLSv1.3
                                (default: TLSv1.2)
  --trace-atomics-wait          trace Atomics.wait() operations
  --trace-deprecation           show stack traces on deprecations
  --trace-event-categories=...  comma separated list of trace event
                                categories to record
  --trace-event-file-pattern=...
                                Template string specifying the filepath
                                for the trace-events data, it supports
                                ${rotation} and ${pid}.
  --trace-exit                  show stack trace when an environment exits
  --trace-sigint                enable printing JavaScript stacktrace on
                                SIGINT
  --trace-sync-io               show stack trace when use of sync IO is
                                detected after the first tick
  --trace-tls                   prints TLS packet trace information to
                                stderr
  --trace-uncaught              show stack traces for the `throw` behind
                                uncaught exceptions
  --trace-warnings              show stack traces on process warnings
  --track-heap-objects          track heap object allocations for heap
                                snapshots
  --unhandled-rejections=...    define unhandled rejections behavior.
                                Options are 'strict' (always raise an
                                error), 'throw' (raise an error unless
                                'unhandledRejection' hook is set), 'warn'
                                (log a warning), 'none' (silence
                                warnings), 'warn-with-error-code' (log a
                                warning and set exit code 1 unless
                                'unhandledRejection' hook is set).
                                (default: throw)
  --use-bundled-ca              use bundled CA store (default)
  --use-largepages=...          Map the Node.js static code to large
                                pages. Options are 'off' (the default
                                value, meaning do not map), 'on' (map and
                                ignore failure, reporting it to stderr),
                                or 'silent' (map and silently ignore
                                failure)
  --use-openssl-ca              use OpenSSL's default CA store
  --v8-options                  print V8 command line options
  --v8-pool-size=...            set V8's thread pool size
  -v, --version                 print Node.js version
  --zero-fill-buffers           automatically zero-fill all newly
                                allocated Buffer and SlowBuffer instances

Environment variables:
FORCE_COLOR                   when set to 'true', 1, 2, 3, or an empty
                              string causes NO_COLOR and
                              NODE_DISABLE_COLORS to be ignored.
NO_COLOR                      Alias for NODE_DISABLE_COLORS
NODE_DEBUG                    ','-separated list of core modules that
                              should print debug information
NODE_DEBUG_NATIVE             ','-separated list of C++ core debug
                              categories that should print debug output
NODE_DISABLE_COLORS           set to 1 to disable colors in the REPL
NODE_EXTRA_CA_CERTS           path to additional CA certificates file.
                              Only read once during process startup.
PS E:\general Practice> node -v
v17.1.0
PS E:\general Practice> node -h
Usage: node [options] [ script.js ] [arguments]
       node inspect [options] [ script.js | host:port ] [arguments]

Options:
  -                             script read from stdin (default if no file
                                name is provided, interactive mode if a   
                                tty)
  --                            indicate the end of node options
  --abort-on-uncaught-exception aborting instead of exiting causes a core 
                                file to be generated for analysis
  -c, --check                   syntax check script without executing     
  --completion-bash             print source-able bash completion script  
  -C, --conditions=...          additional user conditions for conditional
                                exports and imports
  --cpu-prof                    Start the V8 CPU profiler on start up, and
                                write the CPU profile to disk before exit.
                                If --cpu-prof-dir is not specified, write
                                the profile to the current working
                                directory.
  --cpu-prof-dir=...            Directory where the V8 profiles generated
                                by --cpu-prof will be placed. Does not
                                affect --prof.
  --cpu-prof-interval=...       specified sampling interval in
                                microseconds for the V8 CPU profile
                                generated with --cpu-prof. (default: 1000)
  --cpu-prof-name=...           specified file name of the V8 CPU profile
                                generated with --cpu-prof
  --diagnostic-dir=...          set dir for all output files (default:
                                current working directory)
  --disable-proto=...           disable Object.prototype.__proto__
  --disallow-code-generation-from-strings
                                disallow eval and friends
  --dns-result-order=...        set default value of verbatim in
                                dns.lookup. Options are 'ipv4first' (IPv4
                                addresses are placed before IPv6
                                addresses) 'verbatim' (addresses are in
                                the order the DNS resolver returned)
  --enable-fips                 enable FIPS crypto at startup
  --enable-source-maps          Source Map V3 support for stack traces
  -e, --eval=...                evaluate script
  --experimental-import-meta-resolve
                                experimental ES Module
                                import.meta.resolve() support
  --experimental-json-modules   experimental JSON interop support for the
                                ES Module loader
  --loader, --experimental-loader=...
                                use the specified module as a custom
                                loader
  --experimental-policy=...     use the specified file as a security
                                policy
  --es-module-specifier-resolution, --experimental-specifier-resolution=...
                                Select extension resolution algorithm for
                                es modules; either 'explicit' (default) or
                                'node'
  --experimental-vm-modules     experimental ES Module support in vm
                                module
  --experimental-wasi-unstable-preview1
                                experimental WASI support
  --experimental-wasm-modules   experimental ES Module support for
                                webassembly modules
  --force-context-aware         disable loading non-context-aware addons
  --force-fips                  force FIPS crypto (cannot be disabled)
  --frozen-intrinsics           experimental frozen intrinsics support
  --heap-prof                   Start the V8 heap profiler on start up,
                                and write the heap profile to disk before
                                exit. If --heap-prof-dir is not specified,
                                write the profile to the current working
                                directory.
  --heap-prof-dir=...           Directory where the V8 heap profiles
                                generated by --heap-prof will be placed.
  --heap-prof-interval=...      specified sampling interval in bytes for
                                the V8 heap profile generated with
                                --heap-prof. (default: 512 * 1024)
  --heap-prof-name=...          specified file name of the V8 heap profile
                                generated with --heap-prof
  --heapsnapshot-near-heap-limit=...
                                Generate heap snapshots whenever V8 is
                                approaching the heap limit. No more than
                                the specified number of heap snapshots
                                will be generated.
  --heapsnapshot-signal=...     Generate heap snapshot on specified signal
  -h, --help                    print node command line options (currently
                                set)
  --huge-max-old-generation-size
                                increase default maximum heap size on
                                machines with 16GB memory or more
  --icu-data-dir=...            set ICU data load path to dir (overrides
                                NODE_ICU_DATA) (note: linked-in ICU data
                                is present)
  --input-type=...              set module type for string input
  --insecure-http-parser        use an insecure HTTP parser that accepts
                                invalid HTTP headers
  --inspect[=[host:]port]       activate inspector on host:port (default:
                                127.0.0.1:9229)
  --inspect-brk[=[host:]port]   activate inspector on host:port and break
                                at start of user script
  --debug-port, --inspect-port=[host:]port
                                set host:port for inspector
  --inspect-publish-uid=...     comma separated list of destinations for
                                inspector uid(default: stderr,http)
  -i, --interactive             always enter the REPL even if stdin does
                                not appear to be a terminal
  --interpreted-frames-native-stack
                                help system profilers to translate
                                JavaScript interpreted frames
  --jitless                     disable runtime allocation of executable
                                memory
  --max-http-header-size=...    set the maximum size of HTTP headers
                                (default: 16384 (16KB))
  --no-addons                   disable loading native addons
  --no-deprecation              silence deprecation warnings
  --no-experimental-repl-await  experimental await keyword support in REPL
  --no-extra-info-on-fatal-exception
                                hide extra information on fatal exception
                                that causes exit
  --no-force-async-hooks-checks disable checks for async_hooks
  --no-global-search-paths      disable global module search paths
  --no-warnings                 silence all process warnings
  --node-memory-debug           Run with extra debug checks for memory
                                leaks in Node.js itself
  --openssl-config=...          load OpenSSL configuration from the
                                specified file (overrides OPENSSL_CONF)
  --openssl-legacy-provider     enable OpenSSL 3.0 legacy provider
  --pending-deprecation         emit pending deprecation warnings
  --policy-integrity=...        ensure the security policy contents match
                                the specified integrity
  --preserve-symlinks           preserve symbolic links when resolving
  --preserve-symlinks-main      preserve symbolic links when resolving the
                                main module
  -p, --print [...]             evaluate script and print result
  --prof                        Generate V8 profiler output.
  --prof-process                process V8 profiler output generated using
                                --prof
  --redirect-warnings=...       write warnings to file instead of stderr
  --report-compact              output compact single-line JSON
  --report-directory, --report-dir=...
                                define custom report pathname. (default:
                                current working directory)
  --report-filename=...         define custom report file name. (default:
                                YYYYMMDD.HHMMSS.PID.SEQUENCE#.txt)
  --report-on-fatalerror        generate diagnostic report on fatal
                                (internal) errors
  --report-on-signal            generate diagnostic report upon receiving
                                signals
  --report-signal=...           causes diagnostic report to be produced on
                                provided signal, unsupported in Windows.
                                (default: SIGUSR2)
  --report-uncaught-exception   generate diagnostic report on uncaught
                                exceptions
  -r, --require=...             module to preload (option can be repeated)
  --secure-heap=...             total size of the OpenSSL secure heap
  --secure-heap-min=...         minimum allocation size from the OpenSSL
                                secure heap
  --throw-deprecation           throw an exception on deprecations
  --title=...                   the process title to use on startup
  --tls-cipher-list=...         use an alternative default TLS cipher list
  --tls-keylog=...              log TLS decryption keys to named file for
                                traffic analysis
  --tls-max-v1.2                set default TLS maximum to TLSv1.2
                                (default: TLSv1.3)
  --tls-max-v1.3                set default TLS maximum to TLSv1.3
                                (default: TLSv1.3)
  --tls-min-v1.0                set default TLS minimum to TLSv1.0
                                (default: TLSv1.2)
  --tls-min-v1.1                set default TLS minimum to TLSv1.1
                                (default: TLSv1.2)
  --tls-min-v1.2                set default TLS minimum to TLSv1.2
                                (default: TLSv1.2)
  --tls-min-v1.3                set default TLS minimum to TLSv1.3
                                (default: TLSv1.2)
  --trace-atomics-wait          trace Atomics.wait() operations
  --trace-deprecation           show stack traces on deprecations
  --trace-event-categories=...  comma separated list of trace event
                                categories to record
  --trace-event-file-pattern=...
                                Template string specifying the filepath
                                for the trace-events data, it supports
                                ${rotation} and ${pid}.
  --trace-exit                  show stack trace when an environment exits
  --trace-sigint                enable printing JavaScript stacktrace on
                                SIGINT
  --trace-sync-io               show stack trace when use of sync IO is
                                detected after the first tick
  --trace-tls                   prints TLS packet trace information to
                                stderr
  --trace-uncaught              show stack traces for the `throw` behind
                                uncaught exceptions
  --trace-warnings              show stack traces on process warnings
  --track-heap-objects          track heap object allocations for heap
                                snapshots
  --unhandled-rejections=...    define unhandled rejections behavior.
                                Options are 'strict' (always raise an
                                error), 'throw' (raise an error unless
                                'unhandledRejection' hook is set), 'warn'
                                (log a warning), 'none' (silence
                                warnings), 'warn-with-error-code' (log a
                                warning and set exit code 1 unless
                                'unhandledRejection' hook is set).
                                (default: throw)
  --use-bundled-ca              use bundled CA store (default)
  --use-largepages=...          Map the Node.js static code to large
                                pages. Options are 'off' (the default
                                value, meaning do not map), 'on' (map and
                                ignore failure, reporting it to stderr),
                                or 'silent' (map and silently ignore
                                failure)
  --use-openssl-ca              use OpenSSL's default CA store
  --v8-options                  print V8 command line options
  --v8-pool-size=...            set V8's thread pool size
  -v, --version                 print Node.js version
  --zero-fill-buffers           automatically zero-fill all newly
                                allocated Buffer and SlowBuffer instances

Environment variables:
FORCE_COLOR                   when set to 'true', 1, 2, 3, or an empty
                              string causes NO_COLOR and
                              NODE_DISABLE_COLORS to be ignored.
NO_COLOR                      Alias for NODE_DISABLE_COLORS
NODE_DEBUG                    ','-separated list of core modules that
                              should print debug information
NODE_DEBUG_NATIVE             ','-separated list of C++ core debug
                              categories that should print debug output
NODE_DISABLE_COLORS           set to 1 to disable colors in the REPL
NODE_EXTRA_CA_CERTS           path to additional CA certificates file.
                              Only read once during process startup.
NODE_NO_WARNINGS              set to 1 to silence process warnings
NODE_PATH                     ';'-separated list of directories prefixed
                              to the module search path
NODE_PENDING_DEPRECATION      set to 1 to emit pending deprecation
                              warnings
NODE_PENDING_PIPE_INSTANCES   set the number of pending pipe instance
                              handles on Windows
NODE_PRESERVE_SYMLINKS        set to 1 to preserve symbolic links when
                              resolving and caching modules
NODE_REDIRECT_WARNINGS        write warnings to path instead of stderr
NODE_REPL_HISTORY             path to the persistent REPL history file
NODE_TLS_REJECT_UNAUTHORIZED  set to 0 to disable TLS certificate
                              validation
NODE_V8_COVERAGE              directory to output v8 coverage JSON to
UV_THREADPOOL_SIZE            sets the number of threads used in libuv's
                              threadpool

Documentation can be found at https://nodejs.org/ */

/** -e or --eval : -C:\Program Files\nodejs\node.exe: -e requires an argument  */

/** -p :- Welcome to Node.js v17.1.0.       
Type ".help" for more information.
> 4 + 6
10
> hello world
hello world
      ^^^^^

Uncaught SyntaxError: Unexpected identifier
> 89*9
801 */

/** -c :-
 
 */
/** -i or intractive   Welcome to Node.js v17.1.0.       
Type ".help" for more information.
> 87+7
94

*/

/** --v8-options:-   --trace-generalization (trace map generalization)
        type: bool  default: false
  --turboprop (enable experimental turboprop mid-tier compiler)
        type: bool  default: false
  --turboprop-mid-tier-reg-alloc (enable mid-tier register allocator for turboprop)
        type: bool  default: true
  --turboprop-as-toptier (enable experimental turboprop compiler without further tierup to turbofan)        type: bool  default: false
  --turboprop-inline-scaling-factor (scale factor for reduction in bytecode that can be inline for TurboProp compared to TurboFan)
        type: int  default: 4
  --interrupt-budget-scale-factor-for-top-tier (scale factor for profiler ticks when tiering up from midtier)
        type: int  default: 20
  --sparkplug (enable Sparkplug baseline compiler)
        type: bool  default: true
  --always-sparkplug (directly tier up to Sparkplug code)
        type: bool  default: false
  --sparkplug-on-heap (compile Sparkplug code directly on heap)
        type: bool  default: false
  --baseline-batch-compilation (batch compile Sparkplug code)
        type: bool  default: true
  --sparkplug-filter (filter for Sparkplug baseline compiler)
        type: string  default: *
  --sparkplug-needs-short-builtins (only enable Sparkplug baseline compiler when --short-builtin-calls are also enabled)
        type: bool  default: false
  --baseline-batch-compilation-threshold (the estimated instruction size of a batch to trigger compilation)
        type: int  default: 4096
  --trace-baseline (trace baseline compilation)
        type: bool  default: false
  --trace-baseline-batch-compilation (trace baseline batch compilation)
        type: bool  default: false
  --write-code-using-rwx (flip permissions to rwx to write page instead of rw)
        type: bool  default: true
  --concurrent-recompilation (optimizing hot functions asynchronously on a separate thread)
        type: bool  default: true
  --trace-concurrent-recompilation (track concurrent recompilation)
        type: bool  default: false
  --concurrent-recompilation-queue-length (the length of the concurrent compilation queue)
        type: int  default: 8
  --concurrent-recompilation-delay (artificial compilation delay in ms)
        type: int  default: 0
  --concurrent-inlining (run optimizing compiler's inlining phase on a separate thread)
        type: bool  default: false
  --stress-concurrent-inlining (create additional concurrent optimization jobs but throw away result)
        type: bool  default: false
  --stress-concurrent-inlining-attach-code (create additional concurrent optimization jobs)
        type: bool  default: false
  --max-serializer-nesting (maximum levels for nesting child serializers)
        type: int  default: 25
  --trace-heap-broker-verbose (trace the heap broker verbosely (all reports))
        type: bool  default: false
  --trace-heap-broker-memory (trace the heap broker memory (refs analysis and zone numbers))        
        type: bool  default: false
  --trace-heap-broker (trace the heap broker (reports on missing data only))
        type: bool  default: false
  --stress-runs (number of stress runs)
        type: int  default: 0
  --deopt-every-n-times (deoptimize every n times a deopt point is passed)
        type: int  default: 0
  --print-deopt-stress (print number of possible deopt points)
        type: bool  default: false
  --opt (use adaptive optimizations)
        type: bool  default: true
  --turbo-sp-frame-access (use stack pointer-relative access to frame wherever possible)
        type: bool  default: false
  --stress-turbo-late-spilling (optimize placement of all spill instructions, not just loop-top phis)
        type: bool  default: false
  --turbo-filter (optimization filter for TurboFan compiler)
        type: string  default: *
  --trace-turbo (trace generated TurboFan IR)
        type: bool  default: false
  --trace-turbo-path (directory to dump generated TurboFan IR to)
        type: string  default: nullptr
  --trace-turbo-filter (filter for tracing turbofan compilation)
        type: string  default: *
  --trace-turbo-graph (trace generated TurboFan graphs)
        type: bool  default: false
  --trace-turbo-scheduled (trace TurboFan IR with schedule)
        type: bool  default: false
  --trace-turbo-cfg-file (trace turbo cfg graph (for C1 visualizer) to a given file name)
        type: string  default: nullptr
  --trace-turbo-types (trace TurboFan's types)
        type: bool  default: true
  --trace-turbo-scheduler (trace TurboFan's scheduler)
        type: bool  default: false
  --trace-turbo-reduction (trace TurboFan's various reducers)
        type: bool  default: false
  --trace-turbo-trimming (trace TurboFan's graph trimmer)
        type: bool  default: false
  --trace-turbo-jt (trace TurboFan's jump threading)
        type: bool  default: false
  --trace-turbo-ceq (trace TurboFan's control equivalence)
        type: bool  default: false
  --trace-turbo-loop (trace TurboFan's loop optimizations)
        type: bool  default: false
  --trace-turbo-alloc (trace TurboFan's register allocator)
        type: bool  default: false
  --trace-all-uses (trace all use positions)
        type: bool  default: false
  --trace-representation (trace representation types)
        type: bool  default: false
  --trace-turbo-stack-accesses (trace stack load/store counters for optimized code in run-time (x64 
only))
        type: bool  default: false
  --turbo-verify (verify TurboFan graphs at each phase)
        type: bool  default: false
  --turbo-verify-machine-graph (verify TurboFan machine graph before instruction selection)
        type: string  default: nullptr
  --trace-verify-csa (trace code stubs verification)
        type: bool  default: false
  --csa-trap-on-node (trigger break point when a node with given id is created in given stub. The format is: StubName,NodeId)
        type: string  default: nullptr
  --turbo-stats (print TurboFan statistics)
        type: bool  default: false
  --turbo-stats-nvp (print TurboFan statistics in machine-readable format)
        type: bool  default: false
  --turbo-stats-wasm (print TurboFan statistics of wasm compilations)
        type: bool  default: false
  --turbo-splitting (split nodes during scheduling in TurboFan)
        type: bool  default: true
  --function-context-specialization (enable function context specialization in TurboFan)
        type: bool  default: false
  --turbo-inlining (enable inlining in TurboFan)
        type: bool  default: true
  --max-inlined-bytecode-size (maximum size of bytecode for a single inlining)
        type: int  default: 460
  --max-inlined-bytecode-size-cumulative (maximum cumulative size of bytecode considered for inlining)
        type: int  default: 920
  --max-inlined-bytecode-size-absolute (maximum absolute size of bytecode considered for inlining)  
        type: int  default: 4600
  --reserve-inline-budget-scale-factor (scale factor of bytecode size used to calculate the inlining budget)
        type: float  default: 1.2
  --max-inlined-bytecode-size-small (maximum size of bytecode considered for small function inlining)
        type: int  default: 27
  --max-optimized-bytecode-size (maximum bytecode size to be considered for optimization; too high values may cause the compiler to hit (release) assertions)
        type: int  default: 61440
  --min-inlining-frequency (minimum frequency for inlining)
        type: float  default: 0.15
  --polymorphic-inlining (polymorphic inlining)
        type: bool  default: true
  --stress-inline (set high thresholds for inlining to inline as much as possible)
        type: bool  default: false
  --trace-turbo-inlining (trace TurboFan inlining)
        type: bool  default: false
  --turbo-inline-array-builtins (inline array builtins in TurboFan code)
        type: bool  default: true
  --use-osr (use on-stack replacement)
        type: bool  default: true
  --trace-osr (trace on-stack replacement)
        type: bool  default: false
  --analyze-environment-liveness (analyze liveness of environment slots and zap dead values)        
        type: bool  default: true
  --trace-environment-liveness (trace liveness of local variable slots)
        type: bool  default: false
  --turbo-load-elimination (enable load elimination in TurboFan)
        type: bool  default: true
  --trace-turbo-load-elimination (trace TurboFan load elimination)
        type: bool  default: false
  --turbo-profiling (enable basic block profiling in TurboFan)
        type: bool  default: false
  --turbo-profiling-verbose (enable basic block profiling in TurboFan, and include each function's schedule and disassembly in the output)
        type: bool  default: false
  --turbo-profiling-log-builtins (emit data about basic block usage in builtins to v8.log (requires 
that V8 was built with v8_enable_builtins_profiling=true))
        type: bool  default: false
  --turbo-verify-allocation (verify register allocation in TurboFan)
        type: bool  default: false
  --turbo-move-optimization (optimize gap moves in TurboFan)
        type: bool  default: true
  --turbo-jt (enable jump threading in TurboFan)
        type: bool  default: true
  --turbo-loop-peeling (TurboFan loop peeling)
        type: bool  default: true
  --turbo-loop-variable (TurboFan loop variable optimization)
        type: bool  default: true
  --turbo-loop-rotation (TurboFan loop rotation)
        type: bool  default: true
  --turbo-cf-optimization (optimize control flow in TurboFan)
        type: bool  default: true
  --turbo-escape (enable escape analysis)
        type: bool  default: true
  --turbo-allocation-folding (TurboFan allocation folding)
        type: bool  default: true
  --turbo-instruction-scheduling (enable instruction scheduling in TurboFan)
        type: bool  default: false
  --turbo-stress-instruction-scheduling (randomly schedule instructions to stress dependency tracking)
        type: bool  default: false
  --turbo-store-elimination (enable store-store elimination in TurboFan)
        type: bool  default: true
  --trace-store-elimination (trace store elimination)
        type: bool  default: false
  --turbo-rewrite-far-jumps (rewrite far to near jumps (ia32,x64))
        type: bool  default: true
  --stress-gc-during-compilation (simulate GC/compiler thread race related to https://crbug.com/v8/8520)
        type: bool  default: false
  --turbo-fast-api-calls (enable fast API calls from TurboFan)
        type: bool  default: false
  --reuse-opt-code-count (don't discard optimized code for the specified number of deopts.)
        type: int  default: 0
  --turbo-dynamic-map-checks (use dynamic map checks when generating code for property accesses if all handlers in an IC are the same for turboprop)
        type: bool  default: false
  --turbo-compress-translation-arrays (compress translation arrays (experimental))
        type: bool  default: false
  --turbo-inline-js-wasm-calls (inline JS->Wasm calls)
        type: bool  default: false
  --turbo-optimize-apply (optimize Function.prototype.apply)
        type: bool  default: true
  --turbo-collect-feedback-in-generic-lowering (enable experimental feedback collection in generic lowering.)
        type: bool  default: true
  --isolate-script-cache-ageing (enable ageing of the isolate script cache.)
        type: bool  default: true
  --script-delay (busy wait [ms] on every Script::Run)
        type: float  default: 0
  --script-delay-once (busy wait [ms] on the first Script::Run)
        type: float  default: 0
  --script-delay-fraction (busy wait after each Script::Run by the given fraction of the run's duration)
        type: float  default: 0
  --optimize-for-size (Enables optimizations which favor memory size over execution speed)
        type: bool  default: false
  --wasm-generic-wrapper (allow use of the generic js-to-wasm wrapper instead of per-signature wrappers)
        type: bool  default: true
  --expose-wasm (expose wasm interface to JavaScript)
        type: bool  default: true
  --wasm-num-compilation-tasks (maximum number of parallel compilation tasks for wasm)
        type: int  default: 128
  --wasm-write-protect-code-memory (write protect code memory on the wasm native heap with mprotect)        type: bool  default: false
  --wasm-memory-protection-keys (protect wasm code memory with PKU if available, no protection without support; fallback to mprotect by adding --wasm-write-protect-code-memory)
        type: bool  default: false
  --wasm-async-compilation (enable actual asynchronous compilation for WebAssembly.compile)
        type: bool  default: true
  --wasm-test-streaming (use streaming compilation instead of async compilation for tests)
        type: bool  default: false
  --wasm-max-mem-pages (maximum number of 64KiB memory pages per wasm memory)
        type: uint  default: 65536
  --wasm-max-table-size (maximum table size of a wasm instance)
        type: uint  default: 10000000
  --wasm-max-code-space (maximum committed code space for wasm (in MB))
        type: uint  default: 4095
  --wasm-tier-up (enable tier up to the optimizing compiler (requires --liftoff to have an effect)) 
        type: bool  default: true
  --wasm-dynamic-tiering (enable dynamic tier up to the optimizing compiler)
        type: bool  default: false
  --liftoff (enable Liftoff, the baseline compiler for WebAssembly)
        type: bool  default: true
  --liftoff-only (disallow TurboFan compilation for WebAssembly (for testing))
        type: bool  default: false
  --trace-wasm-memory (print all memory updates performed in wasm code)
        type: bool  default: false
  --wasm-tier-mask-for-testing (bitmask of functions to compile with TurboFan instead of Liftoff)   
        type: int  default: 0
  --wasm-debug-mask-for-testing (bitmask of functions to compile for debugging, only applies if the 
tier is Liftoff)
        type: int  default: 0
  --validate-asm (validate asm.js modules before compiling)
        type: bool  default: true
  --suppress-asm-messages (don't emit asm.js related messages (for golden file testing))
        type: bool  default: false
  --trace-asm-time (print asm.js timing info to the console)
        type: bool  default: false
  --trace-asm-scanner (print tokens encountered by asm.js scanner)
        type: bool  default: false
  --trace-asm-parser (verbose logging of asm.js parse failures)
        type: bool  default: false
  --stress-validate-asm (try to validate everything as asm.js)
        type: bool  default: false
  --dump-wasm-module-path (directory to dump wasm modules to)
        type: string  default: nullptr
  --experimental-wasm-compilation-hints (enable prototype compilation hints section for wasm)       
        type: bool  default: false
  --experimental-wasm-gc (enable prototype garbage collection for wasm)
        type: bool  default: false
  --experimental-wasm-nn-locals (enable prototype allow non-defaultable/non-nullable locals, validated with 'until end of block' semantics for wasm)
        type: bool  default: false
  --experimental-wasm-unsafe-nn-locals (enable prototype allow non-defaultable/non-nullable locals, 
no validation for wasm)
        type: bool  default: false
  --experimental-wasm-typed-funcref (enable prototype typed function references for wasm)
        type: bool  default: false
  --experimental-wasm-memory64 (enable prototype memory64 for wasm)
        type: bool  default: false
  --experimental-wasm-relaxed-simd (enable prototype relaxed simd for wasm)
        type: bool  default: false
  --experimental-wasm-branch-hinting (enable prototype branch hinting for wasm)
        type: bool  default: false
  --experimental-wasm-stack-switching (enable prototype stack switching for wasm)
        type: bool  default: false
  --experimental-wasm-reftypes (enable prototype reference type opcodes for wasm)
        type: bool  default: false
  --experimental-wasm-return-call (enable prototype return call opcodes for wasm)
        type: bool  default: false
  --experimental-wasm-type-reflection (enable prototype wasm type reflection in JS for wasm)        
        type: bool  default: false
  --experimental-wasm-simd (enable prototype SIMD opcodes for wasm)
        type: bool  default: true
  --experimental-wasm-threads (enable prototype thread opcodes for wasm)
        type: bool  default: true
  --experimental-wasm-eh (enable prototype exception handling opcodes for wasm)
        type: bool  default: true
  --wasm-gc-js-interop (experimental WasmGC-JS interop)
        type: bool  default: false
  --wasm-staging (enable staged wasm features)
        type: bool  default: false
  --wasm-opt (enable wasm optimization)
        type: bool  default: true
  --wasm-bounds-checks (enable bounds checks (disable for performance testing only))
        type: bool  default: true
  --wasm-stack-checks (enable stack checks (disable for performance testing only))
        type: bool  default: true
  --wasm-enforce-bounds-checks (enforce explicit bounds check even if the trap handler is available)        type: bool  default: false
  --wasm-math-intrinsics (intrinsify some Math imports into wasm)
        type: bool  default: true
  --wasm-inlining (enable inlining of wasm functions into wasm functions (experimental))
        type: bool  default: false
  --wasm-loop-unrolling (enable loop unrolling for wasm functions)
        type: bool  default: true
  --wasm-fuzzer-gen-test (generate a test case when running a wasm fuzzer)
        type: bool  default: false
  --print-wasm-code (print WebAssembly code)
        type: bool  default: false
  --print-wasm-code-function-index (print WebAssembly code for function at index)
        type: int  default: -1
  --print-wasm-stub-code (print WebAssembly stub code)
        type: bool  default: false
  --asm-wasm-lazy-compilation (enable lazy compilation for asm-wasm modules)
        type: bool  default: false
  --wasm-lazy-compilation (enable lazy compilation for all wasm modules)
        type: bool  default: false
  --wasm-lazy-validation (enable lazy validation for lazily compiled wasm functions)
        type: bool  default: false
  --wasm-simd-ssse3-codegen (allow wasm SIMD SSSE3 codegen)
        type: bool  default: false
  --wasm-code-gc (enable garbage collection of wasm code)
        type: bool  default: true
  --trace-wasm-code-gc (trace garbage collection of wasm code)
        type: bool  default: false
  --stress-wasm-code-gc (stress test garbage collection of wasm code)
        type: bool  default: false
  --wasm-max-initial-code-space-reservation (maximum size of the initial wasm code space reservation (in MB))
        type: int  default: 0
  --experimental-wasm-allow-huge-modules (allow wasm modules bigger than 1GB, but below ~2GB)       
        type: bool  default: false
  --trace-wasm (trace wasm function calls)
        type: bool  default: false
  --stress-sampling-allocation-profiler (Enables sampling allocation profiler with X as a sample interval)
        type: int  default: 0
  --lazy-new-space-shrinking (Enables the lazy new space shrinking strategy)
        type: bool  default: false
  --min-semi-space-size (min size of a semi-space (in MBytes), the new space consists of two semi-spaces)
        type: size_t  default: 0
  --max-semi-space-size (max size of a semi-space (in MBytes), the new space consists of two semi-spaces)
        type: size_t  default: 0
  --semi-space-growth-factor (factor by which to grow the new space)
        type: int  default: 2
  --max-old-space-size (max size of the old space (in Mbytes))
        type: size_t  default: 0
  --max-heap-size (max size of the heap (in Mbytes) both max_semi_space_size and max_old_space_size 
take precedence. All three flags cannot be specified at the same time.)
        type: size_t  default: 0
  --initial-heap-size (initial size of the heap (in Mbytes))
        type: size_t  default: 0
  --huge-max-old-generation-size (Increase max size of the old space to 4 GB for x64 systems withthe physical memory bigger than 16 GB)
        type: bool  default: true
  --initial-old-space-size (initial old space size (in Mbytes))
        type: size_t  default: 0
  --global-gc-scheduling (enable GC scheduling based on global memory)
        type: bool  default: true
  --gc-global (always perform global GCs)
        type: bool  default: false
  --random-gc-interval (Collect garbage after random(0, X) allocations. It overrides gc_interval.)
        type: int  default: 0
  --gc-interval (garbage collect after <n> allocations)
        type: int  default: -1
  --retain-maps-for-n-gc (keeps maps alive for <n> old space garbage collections)
        type: int  default: 2
  --trace-gc (print one trace line following each garbage collection)
        type: bool  default: false
  --trace-gc-nvp (print one detailed trace line in name=value format after each garbage collection) 
        type: bool  default: false
  --trace-gc-ignore-scavenger (do not print trace line after scavenger collection)
        type: bool  default: false
  --trace-idle-notification (print one trace line following each idle notification)
        type: bool  default: false
  --trace-idle-notification-verbose (prints the heap state used by the idle notification)
        type: bool  default: false
  --trace-gc-verbose (print more details following each garbage collection)
        type: bool  default: false
  --trace-gc-freelists (prints details of each freelist before and after each major garbage collection)
        type: bool  default: false
  --trace-gc-freelists-verbose (prints details of freelists of each page before and after each major garbage collection)
        type: bool  default: false
  --trace-evacuation-candidates (Show statistics about the pages evacuation by the compaction)      
        type: bool  default: false
  --trace-allocations-origins (Show statistics about the origins of allocations. Combine with --no-inline-new to track allocations from generated code)
        type: bool  default: false
  --trace-pending-allocations (trace calls to Heap::IsAllocationPending that return true)
        type: bool  default: false
  --trace-allocation-stack-interval (print stack trace after <n> free-list allocations)
        type: int  default: -1
  --trace-duplicate-threshold-kb (print duplicate objects in the heap if their size is more than given threshold)
        type: int  default: 0
  --trace-fragmentation (report fragmentation for old space)
        type: bool  default: false
  --trace-fragmentation-verbose (report fragmentation for old space (detailed))
        type: bool  default: false
  --minor-mc-trace-fragmentation (trace fragmentation after marking)
        type: bool  default: false
  --trace-evacuation (report evacuation statistics)
        type: bool  default: false
  --trace-mutator-utilization (print mutator utilization, allocation speed, gc speed)
        type: bool  default: false
  --incremental-marking (use incremental marking)
        type: bool  default: true
  --incremental-marking-wrappers (use incremental marking for marking wrappers)
        type: bool  default: true
  --incremental-marking-task (use tasks for incremental marking)
        type: bool  default: true
  --incremental-marking-soft-trigger (threshold for starting incremental marking via a task in percent of available space: limit - size)
        type: int  default: 0
  --incremental-marking-hard-trigger (threshold for starting incremental marking immediately in percent of available space: limit - size)
        type: int  default: 0
  --trace-unmapper (Trace the unmapping)
        type: bool  default: false
  --parallel-scavenge (parallel scavenge)
        type: bool  default: true
  --scavenge-task (schedule scavenge tasks)
        type: bool  default: true
  --scavenge-task-trigger (scavenge task trigger in percent of the current heap limit)
        type: int  default: 80
  --scavenge-separate-stack-scanning (use a separate phase for stack scanning in scavenge)
        type: bool  default: false
  --trace-parallel-scavenge (trace parallel scavenge)
        type: bool  default: false
  --write-protect-code-memory (write protect code memory)
        type: bool  default: true
  --concurrent-marking (use concurrent marking)
        type: bool  default: false
  --concurrent-array-buffer-sweeping (concurrently sweep array buffers)
        type: bool  default: true
  --stress-concurrent-allocation (start background threads that allocate memory)
        type: bool  default: false
  --parallel-marking (use parallel marking in atomic pause)
        type: bool  default: false
  --ephemeron-fixpoint-iterations (number of fixpoint iterations it takes to switch to linear ephemeron algorithm)
        type: int  default: 10
  --trace-concurrent-marking (trace concurrent marking)
        type: bool  default: false
  --concurrent-sweeping (use concurrent sweeping)
        type: bool  default: true
  --parallel-compaction (use parallel compaction)
        type: bool  default: true
  --parallel-pointer-update (use parallel pointer update during compaction)
        type: bool  default: true
  --detect-ineffective-gcs-near-heap-limit (trigger out-of-memory failure to avoid GC storm near heap limit)
        type: bool  default: true
  --trace-incremental-marking (trace progress of the incremental marking)
        type: bool  default: false
  --trace-stress-marking (trace stress marking progress)
        type: bool  default: false
  --trace-stress-scavenge (trace stress scavenge progress)
        type: bool  default: false
  --track-gc-object-stats (track object counts and memory usage)
        type: bool  default: false
  --trace-gc-object-stats (trace object counts and memory usage)
        type: bool  default: false
  --trace-zone-stats (trace zone memory usage)
        type: bool  default: false
  --zone-stats-tolerance (report a tick only when allocated zone memory changes by this amount)
        type: size_t  default: 1048576
  --trace-zone-type-stats (trace per-type zone memory usage)
        type: bool  default: false
  --track-retaining-path (enable support for tracking retaining path)
        type: bool  default: false
  --gc-stats (Used by tracing internally to enable gc statistics)
        type: int  default: 0
  --track-detached-contexts (track native contexts that are expected to be garbage collected)       
        type: bool  default: true
  --trace-detached-contexts (trace native contexts that are expected to be garbage collected)       
        type: bool  default: false
  --move-object-start (enable moving of object starts)
        type: bool  default: true
  --memory-reducer (use memory reducer)
        type: bool  default: true
  --memory-reducer-for-small-heaps (use memory reducer for small heaps)
        type: bool  default: true
  --heap-growing-percent (specifies heap growing factor as (1 + heap_growing_percent/100))
        type: int  default: 0
  --v8-os-page-size (override OS page size (in KBytes))
        type: int  default: 0
  --allocation-buffer-parking (allocation buffer parking)
        type: bool  default: true
  --always-compact (Perform compaction on every full GC)
        type: bool  default: false
  --never-compact (Never perform compaction on full GC - testing only)
        type: bool  default: false
  --compact-code-space (Compact code space on full collections)
        type: bool  default: true
  --flush-baseline-code (flush of baseline code when it has not been executed recently)
        type: bool  default: false
  --flush-bytecode (flush of bytecode when it has not been executed recently)
        type: bool  default: true
  --stress-flush-code (stress code flushing)
        type: bool  default: false
  --trace-flush-bytecode (trace bytecode flushing)
        type: bool  default: false
  --use-marking-progress-bar (Use a progress bar to scan large objects in increments when incremental marking is active.)
        type: bool  default: true
  --stress-per-context-marking-worklist (Use per-context worklist for marking)
        type: bool  default: false
  --force-marking-deque-overflows (force overflows of marking deque by reducing it's size to 64 words)
        type: bool  default: false
  --stress-compaction (stress the GC compactor to flush out bugs (implies --force_marking_deque_overflows))
        type: bool  default: false
  --stress-compaction-random (Stress GC compaction by selecting random percent of pages as evacuation candidates. It overrides stress_compaction.)
        type: bool  default: false
  --stress-incremental-marking (force incremental marking for small heaps and run it more often)
        type: bool  default: false
  --fuzzer-gc-analysis (prints number of allocations and enables analysis mode for gc fuzz testing, 
e.g. --stress-marking, --stress-scavenge)
        type: bool  default: false
  --stress-marking (force marking at random points between 0 and X (inclusive) percent of the regular marking start limit)
        type: int  default: 0
  --stress-scavenge (force scavenge at random points between 0 and X (inclusive) percent of the new 
space capacity)
        type: int  default: 0
  --reclaim-unmodified-wrappers (reclaim otherwise unreachable unmodified wrapper objects when possible)
        type: bool  default: true
  --gc-experiment-less-compaction (less compaction in non-memory reducing mode)
        type: bool  default: false
  --disable-abortjs (disables AbortJS runtime function)
        type: bool  default: false
  --randomize-all-allocations (randomize virtual memory reservations by ignoring any hints passed when allocating pages)
        type: bool  default: false
  --manual-evacuation-candidates-selection (Test mode only flag. It allows an unit test to select evacuation candidates pages (requires --stress_compaction).)
        type: bool  default: false
  --fast-promotion-new-space (fast promote new space on high survival rates)
        type: bool  default: false
  --clear-free-memory (initialize free memory with 0)
        type: bool  default: false
  --crash-on-aborted-evacuation (crash when evacuation of page fails)
        type: bool  default: false
  --enable-sse3 (enable use of SSE3 instructions if available)
        type: bool  default: true
  --enable-ssse3 (enable use of SSSE3 instructions if available)
        type: bool  default: true
  --enable-sse4-1 (enable use of SSE4.1 instructions if available)
        type: bool  default: true
  --enable-sse4-2 (enable use of SSE4.2 instructions if available)
        type: bool  default: true
  --enable-sahf (enable use of SAHF instruction if available (X64 only))
        type: bool  default: true
  --enable-avx (enable use of AVX instructions if available)
        type: bool  default: true
  --enable-avx2 (enable use of AVX2 instructions if available)
        type: bool  default: true
  --enable-fma3 (enable use of FMA3 instructions if available)
        type: bool  default: true
  --enable-bmi1 (enable use of BMI1 instructions if available)
        type: bool  default: true
  --enable-bmi2 (enable use of BMI2 instructions if available)
        type: bool  default: true
  --enable-lzcnt (enable use of LZCNT instruction if available)
        type: bool  default: true
  --enable-popcnt (enable use of POPCNT instruction if available)
        type: bool  default: true
  --arm-arch (generate instructions for the selected ARM architecture if available: armv6, armv7, armv7+sudiv or armv8)
        type: string  default: armv8
  --force-long-branches (force all emitted branches to be in long mode (MIPS/PPC only))
        type: bool  default: false
  --mcpu (enable optimization for specific cpu)
        type: string  default: auto
  --partial-constant-pool (enable use of partial constant pools (X64 only))
        type: bool  default: true
  --sim-arm64-optional-features (enable optional features on the simulator for testing: none or all)        type: string  default: none
  --enable-source-at-csa-bind (Include source information in the binary at CSA bind locations.)     
        type: bool  default: false
  --enable-armv7 (deprecated (use --arm_arch instead))
        type: maybe_bool  default: unset
  --enable-vfp3 (deprecated (use --arm_arch instead))
        type: maybe_bool  default: unset
  --enable-32dregs (deprecated (use --arm_arch instead))
        type: maybe_bool  default: unset
  --enable-neon (deprecated (use --arm_arch instead))
        type: maybe_bool  default: unset
  --enable-sudiv (deprecated (use --arm_arch instead))
        type: maybe_bool  default: unset
  --enable-armv8 (deprecated (use --arm_arch instead))
        type: maybe_bool  default: unset
  --enable-regexp-unaligned-accesses (enable unaligned accesses for the regexp engine)
        type: bool  default: true
  --script-streaming (enable parsing on background)
        type: bool  default: true
  --stress-background-compile (stress test parsing on background)
        type: bool  default: false
  --finalize-streaming-on-background (perform the script streaming finalization on the background thread)
        type: bool  default: true
  --concurrent-cache-deserialization (enable deserializing code caches on background)
        type: bool  default: true
  --disable-old-api-accessors (Disable old-style API accessors whose setters trigger through the prototype chain)
        type: bool  default: false
  --embedder-instance-types (enable type checks based on instance types provided by the embedder)   
        type: bool  default: false
  --expose-gc (expose gc extension)
        type: bool  default: false
  --expose-gc-as (expose gc extension under the specified name)
        type: string  default: nullptr
  --expose-externalize-string (expose externalize string extension)
        type: bool  default: false
  --expose-trigger-failure (expose trigger-failure extension)
        type: bool  default: false
  --expose-ignition-statistics (expose ignition-statistics extension (requires building with v8_enable_ignition_dispatch_counting))
        type: bool  default: false
  --stack-trace-limit (number of stack frames to capture)
        type: int  default: 10
  --builtins-in-stack-traces (show built-in functions in stack traces)
        type: bool  default: false
  --experimental-stack-trace-frames (enable experimental frames (API/Builtins) and stack trace layout)
        type: bool  default: false
  --disallow-code-generation-from-strings (disallow eval and friends)
        type: bool  default: false
  --expose-async-hooks (expose async_hooks object)
        type: bool  default: false
  --expose-cputracemark-as (expose cputracemark extension under the specified name)
        type: string  default: nullptr
  --allow-unsafe-function-constructor (allow invoking the function constructor without security checks)
        type: bool  default: false
  --force-slow-path (always take the slow path for builtins)
        type: bool  default: false
  --test-small-max-function-context-stub-size (enable testing the function context size overflow path by making the maximum size smaller)
        type: bool  default: false
  --inline-new (use fast inline allocation)
        type: bool  default: true
  --switch-table-spread-threshold (allow the jump table used for switch statements to span a range of integers roughly equal to this number times the number of clauses in the switch)
        type: int  default: 3
  --switch-table-min-cases (the number of Smi integer cases present in the switch statement before using the jump table optimization)
        type: int  default: 6
  --trace (trace javascript function calls)
        type: bool  default: false
  --lazy (use lazy compilation)
        type: bool  default: true
  --lazy-eval (use lazy compilation during eval)
        type: bool  default: true
  --lazy-streaming (use lazy compilation during streaming compilation)
        type: bool  default: true
  --max-lazy (ignore eager compilation hints)
        type: bool  default: false
  --trace-opt (trace optimized compilation)
        type: bool  default: false
  --trace-opt-verbose (extra verbose optimized compilation tracing)
        type: bool  default: false
  --trace-opt-stats (trace optimized compilation statistics)
        type: bool  default: false
  --trace-deopt (trace deoptimization)
        type: bool  default: false
  --log-deopt (log deoptimization)
        type: bool  default: false
  --trace-deopt-verbose (extra verbose deoptimization tracing)
        type: bool  default: false
  --trace-file-names (include file names in trace-opt/trace-deopt output)
        type: bool  default: false
  --always-opt (always try to optimize functions)
        type: bool  default: false
  --always-osr (always try to OSR functions)
        type: bool  default: false
  --prepare-always-opt (prepare for turning on always opt)
        type: bool  default: false
  --trace-serializer (print code serializer trace)
        type: bool  default: false
  --compilation-cache (enable compilation cache)
        type: bool  default: true
  --cache-prototype-transitions (cache prototype transitions)
        type: bool  default: true
  --parallel-compile-tasks (enable parallel compile tasks)
        type: bool  default: false
  --lazy-compile-dispatcher (enable compiler dispatcher)
        type: bool  default: false
  --trace-compiler-dispatcher (trace compiler dispatcher activity)
        type: bool  default: false
  --cpu-profiler-sampling-interval (CPU profiler sampling interval in microseconds)
        type: int  default: 1000
  --trace-side-effect-free-debug-evaluate (print debug messages for side-effect-free debug-evaluate 
for testing)
        type: bool  default: false
  --hard-abort (abort by crashing)
        type: bool  default: true
  --log-colour (When logging, try to use coloured output.)
        type: bool  default: false
  --expose-inspector-scripts (expose injected-script-source.js for debugging)
        type: bool  default: false
  --stack-size (default size of stack region v8 is allowed to use (in kBytes))
        type: int  default: 984
  --max-stack-trace-source-length (maximum length of function source code printed in a stack trace.)        type: int  default: 300
  --clear-exceptions-on-js-entry (clear pending exceptions when entering JavaScript)
        type: bool  default: false
  --histogram-interval (time interval in ms for aggregating memory histograms)
        type: int  default: 600000
  --heap-profiler-trace-objects (Dump heap object allocations/movements/size_updates)
        type: bool  default: false
  --heap-profiler-use-embedder-graph (Use the new EmbedderGraph API to get embedder nodes)
        type: bool  default: true
  --heap-snapshot-string-limit (truncate strings to this length in the heap snapshot)
        type: int  default: 1024
  --heap-profiler-show-hidden-objects (use 'native' rather than 'hidden' node type in snapshot)     
        type: bool  default: false
  --sampling-heap-profiler-suppress-randomness (Use constant sample intervals to eliminate test flakiness)
        type: bool  default: false
  --use-idle-notification (Use idle notification to reduce memory footprint.)
        type: bool  default: true
  --log-ic (Log inline cache state transitions for tools/ic-processor)
        type: bool  default: false
  --max-valid-polymorphic-map-count (maximum number of valid maps to track in POLYMORPHIC state)    
        type: int  default: 4
  --native-code-counters (generate extra code for manipulating stats counters)
        type: bool  default: false
  --super-ic (use an IC for super property loads)
        type: bool  default: true
  --enable-mega-dom-ic (use MegaDOM IC state for API objects)
        type: bool  default: false
  --trace-prototype-users (Trace updates to prototype user tracking)
        type: bool  default: false
  --trace-for-in-enumerate (Trace for-in enumerate slow-paths)
        type: bool  default: false
  --log-maps (Log map creation)
        type: bool  default: false
  --log-maps-details (Also log map details)
        type: bool  default: true
  --allow-natives-syntax (allow natives syntax)
        type: bool  default: false
  --allow-natives-for-differential-fuzzing (allow only natives explicitly allowlisted for differential fuzzers)
        type: bool  default: false
  --parse-only (only parse the sources)
        type: bool  default: false
  --async-stack-traces (include async stack traces in Error.stack)
        type: bool  default: true
  --stack-trace-on-illegal (print stack trace when an illegal exception is thrown)
        type: bool  default: false
  --abort-on-uncaught-exception (abort program (dump core) when an uncaught exception is thrown)
        type: bool  default: false
  --correctness-fuzzer-suppressions (Suppress certain unspecified behaviors to ease correctness fuzzing: Abort program when the stack overflows or a string exceeds maximum length (as opposed to throwing RangeError). Use a fixed suppression string for error messages.)
        type: bool  default: false
  --randomize-hashes (randomize hashes to avoid predictable hash collisions (with snapshots this option cannot override the baked-in seed))
        type: bool  default: true
  --rehash-snapshot (rehash strings from the snapshot to override the baked-in seed)
        type: bool  default: true
  --hash-seed (Fixed seed to use to hash property keys (0 means random)(with snapshots this option cannot override the baked-in seed))
        type: uint64  default: 0
  --random-seed (Default seed for initializing random generator (0, the default, means to use system random).)
        type: int  default: 0
  --fuzzer-random-seed (Default seed for initializing fuzzer random generator (0, the default, means to use v8's random number generator seed).)
        type: int  default: 0
  --trace-rail (trace RAIL mode)
        type: bool  default: false
  --print-all-exceptions (print exception object and stack trace on each thrown exception)
        type: bool  default: false
  --detailed-error-stack-trace (includes arguments for each function call in the error stack frames 
array)
        type: bool  default: false
  --adjust-os-scheduling-parameters (adjust OS specific scheduling params for the isolate)
        type: bool  default: true
  --experimental-flush-embedded-blob-icache (Used in an experiment to evaluate icache flushing on certain CPUs)
        type: bool  default: true
  --runtime-call-stats (report runtime call counts and times)
        type: bool  default: false
  --rcs (report runtime call counts and times)
        type: bool  default: false
  --rcs-cpu-time (report runtime times in cpu time (the default is wall time))
        type: bool  default: false
  --skip-snapshot-checksum (Skip snapshot checksum calculation when deserializing an Isolate.)      
        type: bool  default: false
  --profile-deserialization (Print the time it takes to deserialize the snapshot.)
        type: bool  default: false
  --serialization-statistics (Collect statistics on serialized objects.)
        type: bool  default: false
  --regexp-optimization (generate optimized regexp code)
        type: bool  default: true
  --regexp-interpret-all (interpret all regexp code)
        type: bool  default: false
  --regexp-tier-up (enable regexp interpreter and tier up to the compiler after the number of executions set by the tier up ticks flag)
        type: bool  default: true
  --regexp-tier-up-ticks (set the number of executions for the regexp interpreter before tiering-up 
to the compiler)
        type: int  default: 1
  --regexp-peephole-optimization (enable peephole optimization for regexp bytecode)
        type: bool  default: true
  --trace-regexp-peephole-optimization (trace regexp bytecode peephole optimization)
        type: bool  default: false
  --trace-regexp-bytecodes (trace regexp bytecode execution)
        type: bool  default: false
  --trace-regexp-assembler (trace regexp macro assembler calls.)
        type: bool  default: false
  --trace-regexp-parser (trace regexp parsing)
        type: bool  default: false
  --trace-regexp-tier-up (trace regexp tiering up execution)
        type: bool  default: false
  --trace-regexp-graph (trace the regexp graph)
        type: bool  default: false
  --enable-experimental-regexp-engine (recognize regexps with 'l' flag, run them on experimental engine)
        type: bool  default: false
  --default-to-experimental-regexp-engine (run regexps with the experimental engine where possible) 
        type: bool  default: false
  --trace-experimental-regexp-engine (trace execution of experimental regexp engine)
        type: bool  default: false
  --enable-experimental-regexp-engine-on-excessive-backtracks (fall back to a breadth-first regexp engine on excessive backtracking)
        type: bool  default: false
  --regexp-backtracks-before-fallback (number of backtracks during regexp execution before fall back to experimental engine if enable_experimental_regexp_engine_on_excessive_backtracks is set)        
        type: uint  default: 50000
  --testing-bool-flag (testing_bool_flag)
        type: bool  default: true
  --testing-maybe-bool-flag (testing_maybe_bool_flag)
        type: maybe_bool  default: unset
  --testing-int-flag (testing_int_flag)
        type: int  default: 13
  --testing-float-flag (float-flag)
        type: float  default: 2.5
  --testing-string-flag (string-flag)
        type: string  default: Hello, world!
  --testing-prng-seed (Seed used for threading test randomness)
        type: int  default: 42
  --testing-d8-test-runner (test runner turns on this flag to enable a check that the function was prepared for optimization before marking it for optimization)
        type: bool  default: false
  --fuzzing (Fuzzers use this flag to signal that they are ... fuzzing. This causes intrinsics to fail silently (e.g. return undefined) on invalid usage.)
        type: bool  default: false
  --embedded-src (Path for the generated embedded data file. (mksnapshot only))
        type: string  default: nullptr
  --embedded-variant (Label to disambiguate symbols in embedded data file. (mksnapshot only))       
        type: string  default: nullptr
  --startup-src (Write V8 startup as C++ src. (mksnapshot only))
        type: string  default: nullptr
  --startup-blob (Write V8 startup blob file. (mksnapshot only))
        type: string  default: nullptr
  --target-arch (The mksnapshot target arch. (mksnapshot only))
        type: string  default: nullptr
  --target-os (The mksnapshot target os. (mksnapshot only))
        type: string  default: nullptr
  --target-is-simulator (Instruct mksnapshot that the target is meant to run in the simulator and it can generate simulator-specific instructions. (mksnapshot only))
        type: bool  default: false
  --turbo-profiling-log-file (Path of the input file containing basic block counters for builtins. (mksnapshot only))
        type: string  default: nullptr
  --text-is-readable (Whether the .text section of binary can be read)
        type: bool  default: true
  --trace-minor-mc-parallel-marking (trace parallel marking for the young generation)
        type: bool  default: false
  --minor-mc (perform young generation mark compact GCs)
        type: bool  default: false
  --help (Print usage message, including flags, on console)
        type: bool  default: true
  --dump-counters (Dump counters on exit)
        type: bool  default: false
  --slow-histograms (Enable slow histograms with more overhead.)
        type: bool  default: false
  --dump-counters-nvp (Dump counters as name-value pairs on exit)
        type: bool  default: false
  --use-external-strings (Use external strings for source code)
        type: bool  default: false
  --map-counters (Map counters to a file)
        type: string  default:
  --mock-arraybuffer-allocator (Use a mock ArrayBuffer allocator for testing.)
        type: bool  default: false
  --mock-arraybuffer-allocator-limit (Memory limit for mock ArrayBuffer allocator used to simulate OOM for testing.)
        type: size_t  default: 0
  --logfile (Specify the name of the log file, use '-' for console, '+' for a temporary file.)      
        type: string  default: v8.log
  --logfile-per-isolate (Separate log files for each isolate.)
        type: bool  default: true
  --log (Minimal logging (no API, code, GC, suspect, or handles samples).)
        type: bool  default: false
  --log-all (Log all events to the log file.)
        type: bool  default: false
  --log-api (Log API events to the log file.)
        type: bool  default: false
  --log-code (Log code events to the log file without profiling.)
        type: bool  default: false
  --log-code-disassemble (Log all disassembled code to the log file.)
        type: bool  default: false
  --log-handles (Log global handle events.)
        type: bool  default: false
  --log-suspect (Log suspect operations.)
        type: bool  default: false
  --log-source-code (Log source code.)
        type: bool  default: false
  --log-function-events (Log function events (parse, compile, execute) separately.)
        type: bool  default: false
  --detailed-line-info (Always generate detailed line information for CPU profiling.)
        type: bool  default: false
  --prof-sampling-interval (Interval for --prof samples (in microseconds).)
        type: int  default: 1000
  --prof-cpp (Like --prof, but ignore generated code.)
        type: bool  default: false
  --prof-browser-mode (Used with --prof, turns on browser-compatible mode for profiling.)
        type: bool  default: true
  --prof (Log statistical profiling information (implies --log-code).)
        type: bool  default: false
  --ll-prof (Enable low-level linux profiler.)
        type: bool  default: false
  --gc-fake-mmap (Specify the name of the file for fake gc mmap used in ll_prof)
        type: string  default: /tmp/__v8_gc__
  --log-internal-timer-events (Time internal events.)
        type: bool  default: false
  --redirect-code-traces (output deopt information and disassembly into file code-<pid>-<isolate id>.asm)
        type: bool  default: false
  --redirect-code-traces-to (output deopt information and disassembly into the given file)
        type: string  default: nullptr
  --print-opt-source (print source code of optimized and inlined functions)
        type: bool  default: false
  --vtune-prof-annotate-wasm (Used when v8_enable_vtunejit is enabled, load wasm source map and provide annotate support (experimental).)
        type: bool  default: false
  --win64-unwinding-info (Enable unwinding info for Windows/x64)
        type: bool  default: true
  --interpreted-frames-native-stack (Show interpreted frames on the native stack (useful for external profilers).)
        type: bool  default: false
  --enable-system-instrumentation (Enable platform-specific profiling.)
        type: bool  default: false
  --trace-elements-transitions (trace elements transitions)
        type: bool  default: false
  --trace-creation-allocation-sites (trace the creation of allocation sites)
        type: bool  default: false
  --print-code (print generated code)
        type: bool  default: false
  --print-opt-code (print optimized code)
        type: bool  default: false
  --print-opt-code-filter (filter for printing optimized code)
        type: string  default: *
  --print-code-verbose (print more information for code)
        type: bool  default: false
  --print-builtin-code (print generated code for builtins)
        type: bool  default: false
  --print-builtin-code-filter (filter for printing builtin code)
        type: string  default: *
  --print-regexp-code (print generated regexp code)
        type: bool  default: false
  --print-regexp-bytecode (print generated regexp bytecode)
        type: bool  default: false
  --print-builtin-size (print code size for builtins)
        type: bool  default: false
  --print-all-code (enable all flags related to printing code)
        type: bool  default: false
  --predictable (enable predictable mode)
        type: bool  default: false
  --predictable-gc-schedule (Predictable garbage collection schedule. Fixes heap growing, idle, and 
memory reducing behavior.)
        type: bool  default: false
  --single-threaded (disable the use of background tasks)
        type: bool  default: false
  --single-threaded-gc (disable the use of background gc tasks)
        type: bool  default: false */
/** console type */

//        console.log(__dirname);
  //      console.log(__filename);
    //    console.error("error message");
      //  console.warn("warning message");

      /**OS module */
/** 
      const os= require('os');
       console.log("os.freemem():\n", os.freemem());
       console.log("os.homedir():\n",os.homedir());
       console.log("os.hostname():\n",os.hostname());
       console.log("os.endianness():\n",os.endianness());
       console.log("os.loadavg():\n", os.loadavg());
       console.log("os.platform():\n",os.platform());
       console.log("os.release():\n",os.release());
       console.log("os.tmpdir():\n", os.tmpdir());
       console.log("os.totalmem():\n",os.totalmem());
       console.log("os.type():\n",os.type());
       console.log("os.uptime():\n",os.uptime());*/
/**os.freemem():
 952934400   
os.homedir():  
 C:\Users\yadav
os.hostname():  
 DESKTOP-VK94P72
os.endianness():
 LE
os.loadavg():
 [ 0, 0, 0 ] 
os.platform():
 win32
os.release():
 10.0.19044
os.tmpdir():
 C:\Users\yadav\AppData\Local\Temp
os.totalmem():
 4228165632
os.type():
 Windows_NT
os.uptime():
 612271 */
/** os system commands */
 //const os= require('os');
 //console.log("os.cpus():\n", os.cpus());
 //console.log("os.arch():\n",os.arch());
 //console.log("os.networkInterfaces():\n", os.networkInterfaces());

 /**os.cpus():
 [
  {
    model: 'Intel(R) Core(TM) i3-4005U CPU @ 1.70GHz',
    speed: 1696,
    times: {
      user: 14404546,
      nice: 0,
      sys: 10248437,
      idle: 137754093,
      irq: 1185343
    }
  },
  {
    model: 'Intel(R) Core(TM) i3-4005U CPU @ 1.70GHz',
    speed: 1696,
    times: {
      user: 14430562,
      nice: 0,
      sys: 7956437,
      idle: 140019812,
      irq: 215765
    }
  },
  {
    model: 'Intel(R) Core(TM) i3-4005U CPU @ 1.70GHz',
    speed: 1696,
    times: {
      user: 16863796,
      nice: 0,
      sys: 7961984,
      idle: 137581031,
      irq: 151843
    }
  },
  {
    model: 'Intel(R) Core(TM) i3-4005U CPU @ 1.70GHz',
    speed: 1696,
    times: {
      user: 14873281,
      nice: 0,
      sys: 7038656,
      idle: 140494875,
      irq: 127078
    }
  }
]
os.arch():
 x64
os.networkInterfaces():
 {
  'Wi-Fi': [
    {
      address: 'fe80::3ce5:9d7:55eb:bcdc',
      netmask: 'ffff:ffff:ffff:ffff::',
      family: 'IPv6',
      mac: '28:56:5a:9b:85:15',
      internal: false,
      cidr: 'fe80::3ce5:9d7:55eb:bcdc/64',
      scopeid: 5
    },
    {
      address: '192.168.43.249',
      netmask: '255.255.255.0',
      family: 'IPv4',
      mac: '28:56:5a:9b:85:15',
      internal: false,
      cidr: '192.168.43.249/24'
    }
  ],
  'Loopback Pseudo-Interface 1': [
    {
      address: '::1',
      netmask: 'ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff',
      family: 'IPv6',
      mac: '00:00:00:00:00:00',
      internal: true,
      cidr: '::1/128',
      scopeid: 0
    },
    {
      address: '127.0.0.1',
      netmask: '255.0.0.0',
      family: 'IPv4',
      mac: '00:00:00:00:00:00',
      internal: true,
      cidr: '127.0.0.1/8'
    }
  ]
} */

/**Timer function */

//setInterval(function() {
  //  console.log("setInterval: Hey! 2 second completed!...");
//}, 10000);
/** 
var i =0;

setInterval(() => {
    i++;
    console.log(i); //start print number from 1
},100);*/
/** 
var i =0;
console.log(i);//print only 0;
setInterval(() => {
    i++;
     
},100);*/

/** 
var i =0;
console.log(i);
setInterval(() => {
    i++;
    console.log(i); //print from 0 
},100);*/

/** TimeOut function */
/** 
setTimeout(function() {
    console.log("setTimeout:Hey! 1000 millisecond completed!....");
}, 1000);*/
/** 
var recursive = function () {
    console.log("Hey! 1000 millisecond completed!....");
    setTimeout(recursive, 1000);
}
recursive();*/

/** clear timeout function */

function welcome() {
    console.log("Welcome to software developing world!");

}
var id1 = setInterval(welcome, 1000);
var id2 = setTimeout(welcome, 1000);
clearTimeout(id1);
clearInterval(id2);